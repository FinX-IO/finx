finx.clients.rest_client
========================

.. py:module:: finx.clients.rest_client

.. autoapi-nested-parse::

   author: dick mule
   purpose: FinX Rest Client



Classes
-------

.. autoapisummary::

   finx.clients.rest_client.FinXRestClient


Module Contents
---------------

.. py:class:: FinXRestClient

   Bases: :py:obj:`finx.base_classes.base_client.BaseFinXClient`


   FinX Rest Client Interface


   .. py:method:: model_post_init(__context: Any) -> None

      Pydantic base method that initializes all fields

      :param __context: Context information for pydantic
      :type __context: Any
      :return: None type
      :rtype: None



   .. py:method:: _unpack_session_response(data: dict, cache_lookup: finx.base_classes.context_manager.CacheLookup) -> dict

      :param data: Dict of data from the API
      :type data: dict
      :param cache_lookup: Cache lookup object
      :type cache_lookup: CacheLookup
      :return: Data from the API
      :rtype: dict



   .. py:method:: _dispatch(api_method: str, **kwargs) -> dict
      :async:


      Dispatch a request to the API

      :param api_method: API method to call
      :type api_method: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Response from the API
      :rtype: dict



   .. py:method:: _batch_dispatch(api_method: str, batch_params: list[dict], **kwargs) -> list[dict]
      :async:


      Abstract batch request dispatch function. Issues a request for each input

      :param api_method: API method to call
      :type api_method: str
      :param batch_params: List of api method parameters
      :type batch_params: list[dict]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Response from the API
      :rtype: list[dict]



