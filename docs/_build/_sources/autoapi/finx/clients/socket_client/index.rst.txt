finx.clients.socket_client
==========================

.. py:module:: finx.clients.socket_client

.. autoapi-nested-parse::

   author: dick mule
   purpose: FinX Socket Client



Classes
-------

.. autoapisummary::

   finx.clients.socket_client.FinXWebSocket
   finx.clients.socket_client.FinXSocketClient


Module Contents
---------------

.. py:class:: FinXWebSocket(url: str, header: Union[list, dict, Callable, None] = None, on_open: Optional[Callable[[websocket._core.WebSocket], None]] = None, on_reconnect: Optional[Callable[[websocket._core.WebSocket], None]] = None, on_message: Optional[Callable[[websocket._core.WebSocket, Any], None]] = None, on_error: Optional[Callable[[websocket._core.WebSocket, Any], None]] = None, on_close: Optional[Callable[[websocket._core.WebSocket, Any, Any], None]] = None, on_ping: Optional[Callable] = None, on_pong: Optional[Callable] = None, on_cont_message: Optional[Callable] = None, keep_running: bool = True, get_mask_key: Optional[Callable] = None, cookie: Optional[str] = None, subprotocols: Optional[list] = None, on_data: Optional[Callable] = None, socket: Optional[WebSocketApp.__init__.socket] = None)

   Bases: :py:obj:`websocket.WebSocketApp`


   Wrapper for python WebSocketApp


   .. py:property:: is_connected

      Simple function ensuring socket exists and is connected

      :return: Socket is connected
      :rtype: bool



.. py:class:: FinXSocketClient

   Bases: :py:obj:`finx.base_classes.base_client.BaseFinXClient`


   FinX Socket Client interface


   .. py:attribute:: _awaiting_auth
      :type:  bool


   .. py:attribute:: _is_authenticated
      :type:  bool


   .. py:attribute:: _socket
      :type:  Optional[FinXWebSocket]


   .. py:attribute:: _socket_thread
      :type:  Optional[threading.Thread]


   .. py:attribute:: _last_message
      :type:  str


   .. py:property:: ws_url

      Get the websocket URL

      :return: Websocket URL
      :rtype: str



   .. py:method:: model_post_init(__context: Any) -> None

      Pydantic base method that initializes all fields

      :param __context: Context information for pydantic
      :type __context: Any
      :return: None type
      :rtype: None



   .. py:method:: cleanup()

      Cleanup method

      :return: None type
      :rtype: None



   .. py:property:: is_ssl
      :type: bool


      Check if the socket is SSL

      :return: Boolean value of SSL status
      :rtype: bool



   .. py:property:: is_authenticated
      :type: bool


      Check if the socket is authenticated

      :return: Boolean value of authentication status
      :rtype: bool



   .. py:method:: authenticate(s: FinXWebSocket)

      Authenticate the socket connection

      :param s: Socket
      :type s: FinXWebSocket
      :return: None type
      :rtype: None



