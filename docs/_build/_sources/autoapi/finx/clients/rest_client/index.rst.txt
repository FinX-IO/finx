finx.clients.rest_client
========================

.. py:module:: finx.clients.rest_client

.. autoapi-nested-parse::

   author: dick mule
   purpose: FinX Rest Client



Classes
-------

.. autoapisummary::

   finx.clients.rest_client.FinXRestClient


Module Contents
---------------

.. py:class:: FinXRestClient

   Bases: :py:obj:`finx.base_classes.base_client.BaseFinXClient`


   FinX Rest Client Interface


   .. py:method:: model_post_init(__context: Any) -> None

      Pydantic base method that initializes all fields

      :param __context: Context information for pydantic
      :type __context: Any
      :return: None type
      :rtype: None



   .. py:property:: rest_url

      Get the websocket URL

      :return: Websocket URL
      :rtype: str



   .. py:method:: import_private_data(full_file_path: str) -> bool

      Import private data

      :param full_file_path: Full path to FinX private data template (i.e. /full/path/to/file.xlsx)
      :type full_file_path: str
      :return: True if successful
      :rtype: bool



   .. py:method:: submit_batch_run(full_file_path: str) -> str

      Submit a batch run using the xlsx input configuration file

      :param full_file_path: Full path to the batch run file
      :type full_file_path: str
      :return: Task ID to monitor
      :rtype: str



   .. py:method:: monitor_progress(task_id: str) -> dict

      Monitor the progress of a batch run

      :param task_id: Task ID to monitor
      :type task_id: str
      :return: Progress of the task
      :rtype: dict



   .. py:method:: get_file_result(task_id: str) -> bool

      Get the result of a batch run

      :param task_id: Task ID to monitor
      :type task_id: str
      :return: Progress of the task



   .. py:method:: register_scenario_rates(rates_filename: str) -> dict

      Register scenario rates

      :param rates_filename: Filename of the rates file
      :type rates_filename: str
      :return: Response from the API
      :rtype: dict



   .. py:method:: run_batch_holdings(path_to_holdings_file: str, tasks_to_run: dict) -> str

      Run a batch job for a given set of holdings in a .csv file and specify what task configurations to run.

      :param path_to_holdings_file: Path to the holdings file
      :type path_to_holdings_file: str
      :param tasks_to_run: Tasks to run in the batch job
      :type tasks_to_run: dict
      :return: Task ID to monitor
      :rtype: str



   .. py:method:: wait_for_completion(task_id: str) -> bool
      :async:


      Wait for a batch run to complete

      :param task_id: Task ID to monitor
      :type task_id: str
      :return: True if the task is complete
      :rtype: bool



