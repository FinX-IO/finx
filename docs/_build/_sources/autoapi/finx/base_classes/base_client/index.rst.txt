finx.base_classes.base_client
=============================

.. py:module:: finx.base_classes.base_client

.. autoapi-nested-parse::

   author: dick mule
   purpose: Base Client interface that underpins REST and SOCKET implementations



Classes
-------

.. autoapisummary::

   finx.base_classes.base_client.PayloadCache
   finx.base_classes.base_client.BaseFinXClient


Module Contents
---------------

.. py:class:: PayloadCache

   Bases: :py:obj:`NamedTuple`


   Payload object to manage state internally


   .. py:attribute:: job_id
      :type:  str


   .. py:attribute:: payload
      :type:  dict


   .. py:attribute:: cache_keys
      :type:  list[finx.base_classes.context_manager.CacheLookup]


.. py:class:: BaseFinXClient

   Bases: :py:obj:`finx.base_classes.from_kwargs.BaseMethods`, :py:obj:`abc.ABC`


   Base FinX Client interface - will initialize a context manager and session manager

   :meta enable: members



   .. py:attribute:: context
      :type:  Optional[finx.base_classes.context_manager.ApiContextManager]


   .. py:attribute:: session
      :type:  Optional[finx.base_classes.session_manager.SessionManager]


   .. py:attribute:: finalized
      :type:  Optional[weakref.finalize]
      :value: None



   .. py:attribute:: _payload_cache
      :type:  Optional[PayloadCache]


   .. py:attribute:: _cleaned_up
      :type:  bool


   .. py:method:: model_post_init(__context: Any) -> None

      Pydantic base method that initializes all fields

      :param __context: Context information for pydantic
      :type __context: Any
      :return: None type
      :rtype: None



   .. py:method:: update_payload_cache(job_id: str, payload: dict, cache_keys: list[finx.base_classes.context_manager.CacheLookup]) -> None

      Update the payload cache

      :param job_id: Job ID
      :type job_id: str
      :param payload: Payload data
      :type payload: dict
      :param cache_keys: Cache keys
      :type cache_keys: list[CacheLookup]
      :return: None type object
      :rtype: None



   .. py:method:: cleanup()

      Require any inheritable class to clean up the c++ object

      :return: None type object
      :rtype: None



   .. py:method:: free()

      Free the c++ object

      :return: None type object
      :rtype: None



   .. py:method:: download_file(filename: str, bucket_name: str = None, use_async: bool = True, is_json_response: bool = False) -> dict | pandas.DataFrame
      :async:


      Download a file from the API

      :param filename: Name of the file to download
      :type filename: str
      :param bucket_name: Bucket name to download from
      :type bucket_name: str
      :param use_async: Use async method
      :type use_async: bool
      :param is_json_response: Response is JSON
      :type is_json_response: bool
      :return: File contents
      :rtype: dict | pd.DataFrame



   .. py:method:: upload_file(filename: str, remove_file: bool = False) -> dict

      Download a file from the API

      :param filename: Name of the file to download
      :type filename: str
      :param remove_file: Remove temporary file
      :type remove_file: bool
      :return: File contents
      :rtype: dict | pd.DataFrame



   .. py:method:: load_functions()
      :async:


      Load all available functions from the API

      :return: None type object
      :rtype: None



   .. py:method:: list_api_functions(**kwargs)
      :async:


      List all available API functions

      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: List of API functions
      :rtype: list[dict]



   .. py:method:: batch_coverage_check(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Returns a list of covered securities for a batch of security ids

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: coverage_check(security_id, **kwargs)
      :async:


      Returns a list of covered securities. Check to see if a security id is covered by FinX SecurityDB.

      .. code-block:: python

          >>> # SAMPLE USAGE
          >>> finx_client.coverage_check(security_id='38376R3H7')

      :param security_id: Security ID
      :type security_id: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_list_fixings(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch list fixings function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: list_fixings(as_of_date=None, currency=None, **kwargs)
      :async:


      List fixings function

      :param as_of_date: Date to list fixings for
      :type as_of_date: Optional[str]
      :param currency: Currency to list fixings for
      :type currency: Optional[str]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_get_fixings(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch get fixings function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: get_fixings(fixings, as_of_date=None, tenors=None, **kwargs)
      :async:


      Get fixings function

      :param fixings: List of fixings to get
      :type fixings: list
      :param as_of_date: Date to get fixings for
      :type as_of_date: Optional[str]
      :param tenors: List of tenors to get fixings for (comma separated list)
      :type tenors: Optional[str]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_get_curve(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch get curve function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: get_curve(curve_name, currency, start_date, end_date=None, country_code=None, fixing=None, tenor=None, **kwargs)
      :async:


      Get curve function

      :param curve_name: Name of the curve to get
      :type curve_name: str
      :param currency: Currency to get curve for
      :type currency: str
      :param start_date: Start date for curve
      :type start_date: Optional[str]
      :param end_date: End date for curve
      :type end_date: Optional[str]
      :param country_code: Country code
      :type country_code: Optional[str]
      :param fixing: Fixing for curve
      :type fixing: Optional[str]
      :param tenor: Tenor for curve
      :type tenor: Optional[str]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: interpolate_curve(t_obs, r_obs, t_new, interpolator=None, **kwargs)
      :async:


      Interpolate curve function

      :param t_obs: List of observed times
      :type t_obs: list[float]
      :param r_obs: List of observed rates
      :type r_obs: list[float]
      :param t_new: List of new (interpolated) times
      :type t_new: list[float]
      :param interpolator: Interpolator to use
      :type interpolator: Optional[str]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: get_exchange_rate_history(currency_list, **kwargs)
      :async:


      Get exchange rate history function

      :param currency_list: List of currencies to get exchange rate history for
      :type currency_list: list
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: forecast_exchange_rates(currency_list, as_of_date, post_convert_currency=None, **kwargs)
      :async:


      Forecast exchange rates function

      :param currency_list: List of currencies to forecast exchange rates for
      :type currency_list: list[str]
      :param as_of_date: Date to forecast exchange rates for
      :type as_of_date: str
      :param post_convert_currency: Currency to convert exchange rates to
      :type post_convert_currency: Optional[str]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: upload_private_data(filename, test_data, **kwargs)
      :async:


      Upload private data function

      :param filename: Name of the file to upload
      :type filename: str
      :param test_data: Test data to upload
      :type test_data: dict
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_calculate_greeks(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch calculate greeks function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: calculate_greeks(s0, k, r, sigma, q, T, price, option_side=None, option_type=None, **kwargs)
      :async:


      Calculate greeks function

      :param s0: Initial price
      :type s0: float
      :param k: Strike price
      :type k: float
      :param r: Risk-free rate
      :type r: float
      :param sigma: Volatility
      :type sigma: float
      :param q: Dividend yield
      :type q: float
      :param T: Time to maturity
      :type T: float
      :param price: Price of the option
      :type price: float
      :param option_side: Side of the option (i.e. call or put)
      :type option_side: Optional[str]
      :param option_type: Type of the option (i.e. european or american)
      :type option_type: Optional[str]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_get_security_reference_data(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch get security reference data function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: get_security_reference_data(security_id, as_of_date=None, price=100.0, price_as_yield=False, include_schedule=False, use_test_data=False, **kwargs)
      :async:


      Get security reference data function

      :param security_id: Security ID
      :type security_id: str
      :param as_of_date: Date to get security reference data for
      :type as_of_date: Optional[str]
      :param price: Price of the security
      :type price: Optional[float]
      :param price_as_yield: Price as yield
      :type price_as_yield: Optional[bool | str]
      :param include_schedule: Include schedule data
      :type include_schedule: Optional[bool]
      :param use_test_data: Use test data
      :type use_test_data: Optional[bool]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_get_security_cpr(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch get security CPR function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: get_security_cpr(security_id, as_of_date=None, price=100.0, **kwargs)
      :async:


      Get security CPR function

      :param security_id: Security ID
      :type security_id: str
      :param as_of_date: Date to get security CPR for
      :type as_of_date: Optional[str]
      :param price: Price of the security
      :type price: Optional[float]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_get_security_cash_flows(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch get security cash flows function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: get_security_cash_flows(security_id, as_of_date=None, price=100.0, lognormal=False, volatility=1.0, drift_a=1.0, yield_shift=100.0, shock_in_bp=0.0, price_as_yield=False, cpr=-9999.0, psa=-9999.0, use_test_data=False, **kwargs)
      :async:


      Get security cash flows function

      :param security_id: Security ID
      :type security_id: str
      :param as_of_date: Date to get security cash flows for
      :type as_of_date: Optional[str]
      :param price: Price of the security
      :type price: Optional[float]
      :param lognormal: Lognormal distribution
      :type lognormal: Optional[bool]
      :param volatility: Volatility
      :type volatility: Optional[float]
      :param drift_a: Mean Reversion
      :type drift_a: Optional[float]
      :param yield_shift: Yield shift
      :type yield_shift: Optional[float]
      :param shock_in_bp: Shock in basis points
      :type shock_in_bp: Optional[float]
      :param price_as_yield: Price as yield
      :type price_as_yield: Optional[bool | str]
      :param cpr: CPR
      :type cpr: Optional[float]
      :param psa: PSA
      :type psa: Optional[float]
      :param use_test_data: Use test data
      :type use_test_data: Optional[bool]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_calculate_security_analytics(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch calculate security analytics function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: calculate_security_analytics(security_id, as_of_date=None, price=100.0, lognormal=False, volatility=1.0, drift_a=1.0, yield_shift=100.0, shock_in_bp=0.0, price_as_yield=False, cpr=-9999.0, psa=-9999.0, use_test_data=False, **kwargs)
      :async:


      Calculate security analytics function

      :param security_id: Security ID
      :type security_id: str
      :param as_of_date: Date to calculate security analytics for
      :type as_of_date: Optional[str]
      :param price: Price of the security
      :type price: Optional[float]
      :param lognormal: Lognormal distribution
      :type lognormal: Optional[bool]
      :param volatility: Volatility
      :type volatility: Optional[float]
      :param drift_a: Mean Reversion
      :type drift_a: Optional[float]
      :param yield_shift: Yield shift
      :type yield_shift: Optional[float]
      :param shock_in_bp: Shock in basis points
      :type shock_in_bp: Optional[float]
      :param price_as_yield: Price as yield
      :type price_as_yield: Optional[bool | str]
      :param cpr: CPR
      :type cpr: Optional[float]
      :param psa: PSA
      :type psa: Optional[float]
      :param use_test_data: Use test data
      :type use_test_data: Optional[bool]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_calculate_security_key_rates(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch calculate security key rates function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: calculate_security_key_rates(security_id, as_of_date=None, price=100.0, lognormal=False, volatility=1.0, drift_a=1.0, yield_shift=100.0, key_rate_times=None, price_as_yield=False, cpr=-9999.0, psa=-9999.0, use_test_data=False, **kwargs)
      :async:


      Calculate security key rates function

      :param security_id: Security ID
      :type security_id: str
      :param as_of_date: Date to calculate security key rates for
      :type as_of_date: Optional[str]
      :param price: Price of the security
      :type price: Optional[float]
      :param lognormal: Lognormal distribution
      :type lognormal: Optional[bool]
      :param volatility: Volatility
      :type volatility: Optional[float]
      :param drift_a: Mean Reversion
      :type drift_a: Optional[float]
      :param yield_shift: Yield shift
      :type yield_shift: Optional[float]
      :param key_rate_times: Key rate times
      :type key_rate_times: Optional[list[float]]
      :param price_as_yield: Price as yield
      :type price_as_yield: Optional[bool | str]
      :param cpr: CPR
      :type cpr: Optional[float]
      :param psa: PSA
      :type psa: Optional[float]
      :param use_test_data: Use test data
      :type use_test_data: Optional[bool]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_forecast_cf_and_prices(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch forecast cash flows and prices function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: forecast_cf_and_prices(security_id, as_of_date=None, price=100.0, lognormal=False, volatility=1.0, drift_a=1.0, yield_shift=100.0, shock_in_bp=0.0, price_as_yield=False, skip_projections=True, is_spread_shock=False, reindex_frequency=None, cpr=-9999.0, psa=-9999.0, reporting_dates_only=False, post_convert_currency=None, use_reference_curve=False, use_test_data=False, reset_convention=None, alt_security_id=None, inflation_type=None, **kwargs)
      :async:


      Forecast cash flows and prices function

      :param security_id: Security ID
      :type security_id: str
      :param as_of_date: Date to forecast cash flows and prices for
      :type as_of_date: Optional[str]
      :param price: Price of the security
      :type price: Optional[float]
      :param lognormal: Lognormal distribution
      :type lognormal: Optional[bool]
      :param volatility: Volatility
      :type volatility: Optional[float]
      :param drift_a: Mean Reversion
      :type drift_a: Optional[float]
      :param yield_shift: Yield shift
      :type yield_shift: Optional[float]
      :param shock_in_bp: Shock in basis points
      :type shock_in_bp: Optional[float]
      :param price_as_yield: Price as yield
      :type price_as_yield: Optional[bool | str]
      :param skip_projections: Skip projections
      :type skip_projections: Optional[bool]
      :param is_spread_shock: Spread shock
      :type is_spread_shock: Optional[bool]
      :param reindex_frequency: Reindex frequency (12 = monthly)
      :type reindex_frequency: Optional[int]
      :param cpr: CPR
      :type cpr: Optional[float]
      :param psa: PSA
      :type psa: Optional[float]
      :param reporting_dates_only: Reporting dates only
      :type reporting_dates_only: Optional[bool]
      :param post_convert_currency: Post convert currency
      :type post_convert_currency: Optional[str]
      :param use_reference_curve: Use reference curve
      :type use_reference_curve: Optional[bool]
      :param use_test_data: Use test data
      :type use_test_data: Optional[bool]
      :param reset_convention: Reset convention
      :type reset_convention: Optional[str]
      :param alt_security_id: Alternative security ID
      :type alt_security_id: Optional[str]
      :param inflation_type: Inflation type
      :type inflation_type: Optional[str]
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



   .. py:method:: batch_register_temporary_bond(batch_params=None, input_file=None, output_file=None, **kwargs)
      :async:


      Batch register temporary bond function

      :param batch_params: dict of batch parameters
      :type batch_params: dict
      :param input_file: string path to input file
      :type input_file: str
      :param output_file: string path to output file
      :type output_file: str
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: list[dict]



   .. py:method:: register_temporary_bond(reference_data, schedule_data, **kwargs)
      :async:


      Register temporary bond function

      :param reference_data: Reference data
      :type reference_data: dict
      :param schedule_data: Schedule data
      :type schedule_data: dict
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: Results from the API
      :rtype: dict



