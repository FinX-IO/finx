finx.utils.task_runner
======================

.. py:module:: finx.utils.task_runner

.. autoapi-nested-parse::

   author: dick mule
   purpose: utils for running async tasks and gathering results



Attributes
----------

.. autoapisummary::

   finx.utils.task_runner.NUM_CORES


Classes
-------

.. autoapisummary::

   finx.utils.task_runner.ProgressManager
   finx.utils.task_runner.AsyncTaskManager
   finx.utils.task_runner.AsyncProcessManager
   finx.utils.task_runner.ConcurrencyTypes
   finx.utils.task_runner.TaskRunner


Module Contents
---------------

.. py:data:: NUM_CORES

.. py:class:: ProgressManager

   Manage progress updates for tasks


   .. py:attribute:: progress
      :type:  float
      :value: 0.0



   .. py:attribute:: progress_scale
      :type:  float
      :value: 1.0



   .. py:attribute:: progress_offset
      :type:  float
      :value: 0.0



   .. py:attribute:: wait_time
      :type:  float
      :value: 0.0



   .. py:attribute:: task_name
      :type:  str
      :value: None



   .. py:attribute:: message
      :type:  dict[str, Any]


   .. py:attribute:: send_messages
      :type:  bool
      :value: True



   .. py:attribute:: __cached_message
      :type:  dict[str, Any]


   .. py:method:: chunk_progress(i: int, chunk_size: int)
      :staticmethod:


      utility function for determining progress message increments

      :param i: Ith task
      :type i: int
      :param chunk_size: size of chunk
      :type chunk_size: int
      :return: chunk size or 1
      :rtype: int



   .. py:method:: update_progress(n_completed: int, total_tasks: int)

      Method to update progress state

      :param n_completed: Number of tasks completed
      :type n_completed: int
      :param total_tasks: Total number of tasks
      :type total_tasks: int
      :return: None type object
      :rtype: None



   .. py:method:: log_progress()

      Method to send progress state.  Extend from stdout to websockets, etc.

      :return: None type object
      :rtype: None



.. py:class:: AsyncTaskManager

   Bases: :py:obj:`ProgressManager`


   Class to manage running of multiple coroutines


   .. py:attribute:: tasks
      :type:  list[finx.utils.concurrency.Awaitable]


   .. py:attribute:: chunk_size
      :type:  int


   .. py:attribute:: __total_tasks
      :type:  int


   .. py:property:: n_tasks

      Return n tasks to be run

      :return: number of tasks
      :rtype: int



   .. py:method:: wrap_task(async_task: finx.utils.concurrency.Awaitable, task_id: int) -> dict
      :staticmethod:

      :async:


      Wraps an async task and makes it possible to retrieve results in order

      :param async_task: Awaitable async task to be wrapped
      :type async_task: Awaitable
      :param task_id: Task id
      :type task_id: int
      :return: dict of task id and result allows for sorting
      :rtype: dict



   .. py:method:: wrap_tasks(tasks: list[finx.utils.concurrency.Awaitable]) -> list[finx.utils.concurrency.Awaitable]
      :staticmethod:


      Wrap all tasks for sort ordering results based on original position

      :param tasks: list of tasks
      :type tasks: list[Awaitable]
      :return: list of wrapped tasks
      :rtype: list[Awaitable]



   .. py:method:: unpack_tasks(results) -> list
      :staticmethod:


      Unwrap all tasks for sort ordering results based on original position

      :param results: list of dict
      :type results: list
      :return: list of results
      :rtype: list



   .. py:method:: run_and_monitor() -> list[Any]
      :async:


      Run a list of async tasks and track the progress with logging functionality

      :return: list of results
      :rtype: list



.. py:class:: AsyncProcessManager

   Bases: :py:obj:`AsyncTaskManager`


   Interface for running Multiprocessing tasks


   .. py:attribute:: tasks
      :type:  list[finx.utils.concurrency.ProcessWithReturnValue]


   .. py:method:: from_args_list(process_fn: callable, args_list: list[Any], **kwargs) -> AsyncProcessManager
      :classmethod:


      Create cls from args list

      :param process_fn: Function to be run in multiprocessing
      :type process_fn: callable
      :param args_list: List of arguments to be passed to process_fn
      :type args_list: list[Any]
      :param kwargs: Keyword arguments to be passed to process_fn
      :type kwargs: dict
      :return: AsyncProcessManager object
      :rtype: AsyncProcessManager



   .. py:method:: run_and_monitor(sleep_time: float = 0.05, **kwargs) -> list[Any]
      :async:


      Run process threads limited by CPU_COUNT

      :param sleep_time: Time to sleep between checks
      :type sleep_time: float
      :param kwargs: Keyword arguments
      :type kwargs: dict
      :return: list of results
      :rtype: list



.. py:class:: ConcurrencyTypes

   Bases: :py:obj:`finx.utils.enums.ComparatorEnum`


   Enumerate various concurrency methods


   .. py:attribute:: async_thread
      :value: 1



   .. py:attribute:: async_process
      :value: 2



   .. py:method:: as_str(_type: ConcurrencyTypes) -> str
      :staticmethod:


      Get enum value str from type

      :param _type: Enum type
      :type _type: ConcurrencyTypes
      :return: Enum value as string
      :rtype: str



.. py:class:: TaskRunner

   Bases: :py:obj:`AsyncProcessManager`


   Interface for running a variety of async methods


   .. py:attribute:: async_func
      :type:  Union[finx.utils.concurrency.ProcessWithReturnValue, finx.utils.concurrency.Hybrid]


   .. py:attribute:: tasks
      :type:  list[finx.utils.concurrency.Awaitable | finx.utils.concurrency.ProcessWithReturnValue]


   .. py:attribute:: concurrency_type
      :type:  str | ConcurrencyTypes


   .. py:property:: runnable

      Return async function to call

      :return: Async function to call
      :rtype: Union[CeleryWrapper, Hybrid]



   .. py:method:: run_concurrently(args_list: list[Any], **kwargs) -> list[Any]
      :async:


      Utility function for running parallel tasks and aggregating result

      :param args_list: List of arguments to be passed to async function
      :type args_list: list[Any]
      :param kwargs: Keyword arguments to be passed to async function
      :type kwargs: dict
      :return: list of results
      :rtype: list



